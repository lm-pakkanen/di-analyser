use serde::{Deserialize, Serialize};

#[derive(Debug, Deserialize, Clone)]
pub struct Feedback {
    pub id: Option<usize>,

    #[serde(rename = "Were requirements documents written and maintained?")]
    pub were_requirements_documents_written: String,

    #[serde(rename = "Was an initial project plan document written?")]
    pub was_initial_project_plan_written: String,

    #[serde(rename = "Were specification documents written and maintained?")]
    pub were_specification_documents_written: String,

    #[serde(rename = "Were technical design documents written and maintained? ")]
    pub were_technical_design_documents_written: String,

    #[serde(rename = "Was a software bill of materials (SBOM) document written and maintained? ")]
    pub was_sbom_document_written: String,

    #[serde(rename = "Were draft design documents written?")]
    pub were_draft_design_documents_written: String,

    #[serde(rename = "Were project documents reviewed by someone, not including the author?")]
    pub were_project_documents_reviewed: String,

    #[serde(rename = "[Writing and maintaining requirements documents]")]
    pub impact_writing_requirements_documents: String,

    #[serde(rename = "[Writing an initial project plan document]")]
    pub impact_writing_initial_project_plan: String,

    #[serde(rename = "[Writing and maintaining specification documents]")]
    pub impact_writing_specification_documents: String,

    #[serde(rename = "[Writing and maintaining technical design documents]")]
    pub impact_writing_technical_design_documents: String,

    #[serde(rename = "[Writing and maintaining an SBOM document]")]
    pub impact_writing_sbom_document: String,

    #[serde(rename = "[Writing draft design documents]")]
    pub impact_writing_draft_design_documents: String,

    #[serde(rename = "[Requiring at least one reviewer for documents]")]
    pub impact_requiring_document_reviewers: String,

    #[serde(rename = "Were mutability and side effects avoided?")]
    pub were_mutability_and_side_effects_avoided: String,

    #[serde(rename = "Were mutable variable and method names lexically encoded?")]
    pub were_mutable_names_encoded: String,

    #[serde(rename = "[Avoiding mutability and side effects]")]
    pub impact_avoiding_mutability: String,

    #[serde(rename = "[Lexically encoding mutable variable and method names]")]
    pub impact_encoding_mutable_names: String,

    #[serde(rename = "Was the use of `null` values avoided?")]
    pub were_nulls_avoided: String,

    #[serde(rename = "Were languages other than English used in written technical disciplines?")]
    pub was_non_english_used: String,

    #[serde(rename = "Was a code style established and enforced?")]
    pub was_code_style_enforced: String,

    #[serde(rename = "Was existing code refactored during feature development?")]
    pub was_code_refactored: String,

    #[serde(rename = "Were POSIX timestamps used for point-in-time variables?")]
    pub were_posix_timestamps_used: String,

    #[serde(rename = "Were variables created for \"magic numbers\" ?")]
    pub were_magic_numbers_replaced: String,

    #[serde(rename = "Were code comments used to explain critical code?")]
    pub were_critical_code_commented: String,

    #[serde(rename = "Were Regex patterns explained with code comments?")]
    pub were_regex_patterns_commented: String,

    #[serde(rename = "Was leaving `TODO` code comments avoided?")]
    pub were_todo_comments_avoided: String,

    #[serde(rename = "Was code generated by AI tools reviewed exceptionally carefully?")]
    pub was_ai_generated_code_reviewed: String,

    #[serde(rename = "[Avoiding `null` values]")]
    pub impact_nulls: String,

    #[serde(rename = "[Primarily using English in written technical disciplines]")]
    pub impact_using_english: String,

    #[serde(rename = "[Establishing and enforcing code style]")]
    pub impact_code_style: String,

    #[serde(rename = "[Refactoring existing code during feature development]")]
    pub impact_code_refactoring: String,

    #[serde(rename = "[Using POSIX timestamps for point-in-time variables]")]
    pub impact_posix_timestamps: String,

    #[serde(rename = "[Creating variables for magic numbers]")]
    pub impact_magic_numbers: String,

    #[serde(rename = "[Using code comments to explain critical code]")]
    pub impact_code_comments: String,

    #[serde(rename = "[Explaining Regex patterns with code comments]")]
    pub impact_regex_comments: String,

    #[serde(rename = "[Avoiding leaving `TODO` code comments]")]
    pub impact_avoiding_todo_comments: String,

    #[serde(rename = "[Reviewing code generated by AI tools exceptionally carefully]")]
    pub impact_reviewing_ai_code: String,

    #[serde(rename = "Was a branching strategy established?")]
    pub was_branching_strategy_established: String,

    #[serde(rename = "Was a branch naming strategy established?")]
    pub was_branch_naming_strategy_established: String,

    #[serde(rename = "Was a commit message format established?")]
    pub was_commit_message_format_established: String,

    #[serde(rename = "Was a merging strategy established?")]
    pub was_merging_strategy_established: String,

    #[serde(rename = "[Establishing a branching strategy]")]
    pub impact_branching_strategy: String,

    #[serde(rename = "[Establishing a branch naming strategy]")]
    pub impact_branch_naming_strategy: String,

    #[serde(rename = "[Establishing a commit message format]")]
    pub impact_commit_message_format: String,

    #[serde(rename = "[Establishing a merging strategy]")]
    pub impact_merging_strategy: String,

    #[serde(rename = "Were higher level design issues considered in code reviews?")]
    pub were_higher_level_design_issues_considered: String,

    #[serde(rename = "Was at least one reviewer required for all code changes?")]
    pub was_reviewer_required: String,

    #[serde(rename = "[Considering higher level design issues in code reviews]")]
    pub impact_higher_level_design: String,

    #[serde(rename = "[Requiring at least one reviewer for all code changes]")]
    pub impact_requiring_reviewer: String,

    #[serde(rename = "Were formatter and linter tools established?")]
    pub were_formatter_and_linter_tools_established: String,

    #[serde(rename = "Were static analysis tools established?")]
    pub were_static_analysis_tools_established: String,

    #[serde(rename = "Were configurations for semi-automated tools centralised?")]
    pub were_semi_automated_tools_configured: String,

    #[serde(rename = "Were semi-automated processes run as part of CI/CD regularly?")]
    pub were_semi_automated_processes_run: String,

    #[serde(rename = "Were automated tests run periodically?")]
    pub were_automated_tests_run: String,

    #[serde(rename = "Were tests written like production code?")]
    pub were_tests_written_like_production_code: String,

    #[serde(rename = "Were unit tests written with the build-operate-check pattern?")]
    pub were_unit_tests_written_with_boc: String,

    #[serde(rename = "[Establishing formatter and linter tools]")]
    pub impact_formatter_linter_tools: String,

    #[serde(rename = "[Establishing static analysis tools]")]
    pub impact_static_analysis_tools: String,

    #[serde(rename = "[Centralising configurations of tools]")]
    pub impact_centralising_tools: String,

    #[serde(rename = "[Running semi-automatic tools as part of CI/CD]")]
    pub impact_semi_automated_ci_cd: String,

    #[serde(rename = "[Running automated tests periodically]")]
    pub impact_automated_tests: String,

    #[serde(rename = "[Writing tests like production code]")]
    pub impact_tests_like_production: String,

    #[serde(rename = "[Writing unit tests with the build-operate-check pattern]")]
    pub impact_unit_tests_boc: String,

    #[serde(rename = "Estimate the level of quality of your chosen project")]
    pub project_quality_estimate: i8,
}

#[derive(Debug, Clone)]
pub struct FeedbackWithData {
    pub feedback: Feedback,

    pub were_requirements_documents_written_score: i8,
    pub were_requirements_documents_written_rank: f64,

    pub was_initial_project_plan_written_score: i8,
    pub was_initial_project_plan_written_rank: f64,

    pub were_specification_documents_written_score: i8,
    pub were_specification_documents_written_rank: f64,

    pub were_technical_design_documents_written_score: i8,
    pub were_technical_design_documents_written_rank: f64,

    pub was_sbom_document_written_score: i8,
    pub was_sbom_document_written_rank: f64,

    pub were_draft_design_documents_written_score: i8,
    pub were_draft_design_documents_written_rank: f64,

    pub were_project_documents_reviewed_score: i8,
    pub were_project_documents_reviewed_rank: f64,

    pub were_mutability_and_side_effects_avoided_score: i8,
    pub were_mutability_and_side_effects_avoided_rank: f64,

    pub were_mutable_names_encoded_score: i8,
    pub were_mutable_names_encoded_rank: f64,

    pub were_nulls_avoided_score: i8,
    pub were_nulls_avoided_rank: f64,

    pub was_non_english_used_score: i8,
    pub was_non_english_used_rank: f64,

    pub was_code_style_enforced_score: i8,
    pub was_code_style_enforced_rank: f64,

    pub was_code_refactored_score: i8,
    pub was_code_refactored_rank: f64,

    pub were_posix_timestamps_used_score: i8,
    pub were_posix_timestamps_used_rank: f64,

    pub were_magic_numbers_replaced_score: i8,
    pub were_magic_numbers_replaced_rank: f64,

    pub were_critical_code_commented_score: i8,
    pub were_critical_code_commented_rank: f64,

    pub were_regex_patterns_commented_score: i8,
    pub were_regex_patterns_commented_rank: f64,

    pub were_todo_comments_avoided_score: i8,
    pub were_todo_comments_avoided_rank: f64,

    pub was_ai_generated_code_reviewed_score: i8,
    pub was_ai_generated_code_reviewed_rank: f64,

    pub was_branching_strategy_established_score: i8,
    pub was_branching_strategy_established_rank: f64,

    pub was_branch_naming_strategy_established_score: i8,
    pub was_branch_naming_strategy_established_rank: f64,

    pub was_commit_message_format_established_score: i8,
    pub was_commit_message_format_established_rank: f64,

    pub was_merging_strategy_established_score: i8,
    pub was_merging_strategy_established_rank: f64,

    pub were_higher_level_design_issues_considered_score: i8,
    pub were_higher_level_design_issues_considered_rank: f64,

    pub was_reviewer_required_score: i8,
    pub was_reviewer_required_rank: f64,

    pub were_formatter_and_linter_tools_established_score: i8,
    pub were_formatter_and_linter_tools_established_rank: f64,

    pub were_static_analysis_tools_established_score: i8,
    pub were_static_analysis_tools_established_rank: f64,

    pub were_semi_automated_tools_configured_score: i8,
    pub were_semi_automated_tools_configured_rank: f64,

    pub were_semi_automated_processes_run_score: i8,
    pub were_semi_automated_processes_run_rank: f64,

    pub were_automated_tests_run_score: i8,
    pub were_automated_tests_run_rank: f64,

    pub were_tests_written_like_production_code_score: i8,
    pub were_tests_written_like_production_code_rank: f64,

    pub were_unit_tests_written_with_boc_score: i8,
    pub were_unit_tests_written_with_boc_rank: f64,

    pub project_quality_estimate_rank: f64,
}

impl FeedbackWithData {
    pub fn new(feedback: Feedback) -> Self {
        FeedbackWithData {
            feedback,
            were_requirements_documents_written_score: 0,
            were_requirements_documents_written_rank: 0f64,
            was_initial_project_plan_written_score: 0,
            was_initial_project_plan_written_rank: 0f64,
            were_specification_documents_written_score: 0,
            were_specification_documents_written_rank: 0f64,
            were_technical_design_documents_written_score: 0,
            were_technical_design_documents_written_rank: 0f64,
            was_sbom_document_written_score: 0,
            was_sbom_document_written_rank: 0f64,
            were_draft_design_documents_written_score: 0,
            were_draft_design_documents_written_rank: 0f64,
            were_project_documents_reviewed_score: 0,
            were_project_documents_reviewed_rank: 0f64,
            were_mutability_and_side_effects_avoided_score: 0,
            were_mutability_and_side_effects_avoided_rank: 0f64,
            were_mutable_names_encoded_score: 0,
            were_mutable_names_encoded_rank: 0f64,
            were_nulls_avoided_score: 0,
            were_nulls_avoided_rank: 0f64,
            was_non_english_used_score: 0,
            was_non_english_used_rank: 0f64,
            was_code_style_enforced_score: 0,
            was_code_style_enforced_rank: 0f64,
            was_code_refactored_score: 0,
            was_code_refactored_rank: 0f64,
            were_posix_timestamps_used_score: 0,
            were_posix_timestamps_used_rank: 0f64,
            were_magic_numbers_replaced_score: 0,
            were_magic_numbers_replaced_rank: 0f64,
            were_critical_code_commented_score: 0,
            were_critical_code_commented_rank: 0f64,
            were_regex_patterns_commented_score: 0,
            were_regex_patterns_commented_rank: 0f64,
            were_todo_comments_avoided_score: 0,
            were_todo_comments_avoided_rank: 0f64,
            was_ai_generated_code_reviewed_score: 0,
            was_ai_generated_code_reviewed_rank: 0f64,
            was_branching_strategy_established_score: 0,
            was_branching_strategy_established_rank: 0f64,
            was_branch_naming_strategy_established_score: 0,
            was_branch_naming_strategy_established_rank: 0f64,
            was_commit_message_format_established_score: 0,
            was_commit_message_format_established_rank: 0f64,
            was_merging_strategy_established_score: 0,
            was_merging_strategy_established_rank: 0f64,
            were_higher_level_design_issues_considered_score: 0,
            were_higher_level_design_issues_considered_rank: 0f64,
            was_reviewer_required_score: 0,
            was_reviewer_required_rank: 0f64,
            were_formatter_and_linter_tools_established_score: 0,
            were_formatter_and_linter_tools_established_rank: 0f64,
            were_static_analysis_tools_established_score: 0,
            were_static_analysis_tools_established_rank: 0f64,
            were_semi_automated_tools_configured_score: 0,
            were_semi_automated_tools_configured_rank: 0f64,
            were_semi_automated_processes_run_score: 0,
            were_semi_automated_processes_run_rank: 0f64,
            were_automated_tests_run_score: 0,
            were_automated_tests_run_rank: 0f64,
            were_tests_written_like_production_code_score: 0,
            were_tests_written_like_production_code_rank: 0f64,
            were_unit_tests_written_with_boc_score: 0,
            were_unit_tests_written_with_boc_rank: 0f64,
            project_quality_estimate_rank: 0f64,
        }
    }
}

#[derive(Debug, Serialize)]
pub struct QuestionCorrelationData {
    pub question: String,
    pub rho: f64,
    pub p_value: f64,
    pub answer_count: usize,
}

#[derive(Debug, Serialize)]
pub struct QuestionImpactData {
    pub question: String,
    pub impact_average: f32,
    pub answer_count: usize,
}

#[derive(Debug, Serialize)]
pub struct QuestionDataDiffs {
    pub question_correlation: String,
    pub rho: f64,
    pub p_value: f64,
    pub correlation_answer_count: usize,
    pub question_impact: String,
    pub impact_average: f32,
    pub impact_answer_count: usize,
    pub diff: f64,
}
